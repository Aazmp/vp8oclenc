##################
### 30.11.2013 ###
##################

1) restructured code into directories
2) added linux x64 and x32 gcc builds (tested on the same AMD+AMD but + Mint15(x64))
2') for linux builds code has been slightly modified (not in rep) like: change \ to /, delete conio.h::getch(), io.h(windows one), setmode().
3) added win32 build from VS2008
4) kernels in bin directory are the kernels corresponding to binaries, not being developed ones.
5) "IO.h" renamed to "encIO.h" to move further from <io.h>


##################
### 27.11.2013 ###
##################

1) Bugfix with local memory - now work group size is 256 instad of auto.
2) Bugfix with reseting vectors. 
Not all vector nets were set to zero which resulted in corrupted vectors and artifacts along bottom border.
3) Little change in vector dependencies that allow lower bitrates now.


##################
### 24.11.2013 ###
##################

1) Loop filter is done on CPU by default now. To filter on GPU use "-loop-filter-on-gpu" option.
No point of using loop filter on GPU on video < 4K. On system FX6300+HD7850 loop filter on CPU gives +50% on 1920x1080 and +250% on 700x400.
Loop filter can be overlapped with boolean encoding with options "-threads" > "-partitions" + 3.

2) All types like int32_t, uint8_t... replaced with cl_int, cl_uchar...

3) New options. "-partitions" is the old "-t" - number of partitions. "-threads" - thead number limit when doing loop filters and boolean coding at the same time.

4) Now GPU GPU kernels execute in parallel where possible (through 3 command queues)


P.S. Tried to replace IF-ELSE parts of block tokenizing in boolean coder, got no speed boost
(usually blocks have a lot of zero coeffs after inter prediction and this part takes noticeable time only in key frames, so it's not the thing that should be optimized)

##################
### 21.11.2013 ###
##################

1) Now codec uses image objects for reference frames. 

2) Interpolation is made on the run but still in sofware (OpenCL doesn't offer bicubic interpolation) 

3) GPU code divided in some smaller pieces (dct kernel, idct kernel, wht kernel...) no more long kernels => faster compilation and smaller memory usage. 

4) all 3 reference buffers used: ALTREF, GOLDEN, LAST - for search

Some results: 
1) memory usage decreased by huge amount. now it fits almost every GPU device. 

2) speed a little bit slower (but amount of search done is higher) 

3) -cl-opt-disable slows down working with images by 13x times (maybe because there is no option to read 32 bit from one channel image in OpenCL language and only compiler could improve this, maybe not) 

4) on E350 (HD6410) performance is veeeeery slow (again because of image usage)

TODO: pure C optimization (LUT instead of IFs, etc...), asm, visual scene changeand effects detection...

##################
###  sometime  ###
##################

1) Now instead of one cl_kernel instance per kernel there are one for each argument set for each kernel.
Init part of code become larger, but inter_transform more readable.
Even if deleting clSetKernelArg(...) lower CPU usage, it can't be seen in CPU monitor.

2) Deleted bitrate check for key frame. It's not useful.

3) Forgot about changelog.

##################
### 05.04.2014 ###
##################

1) Remembered that i have changelog.

2) Loop filter on GPU is broken. For now.
Just haven't rewritten it's code to match changes.
Loop filter on CPU is working.

3) Replaced complex macroblock buffer with multiple theme buffers (vectors, coefficients, non_zero counts, parts, segment ids...).
Now unnecessary copies are avoided (example: OpenCL CPU device needs coefficient, but doesn't need vectors). 
Also GPU read/write has become a little bit more coalesced (coefficients are still in one uge chunk, so not everywhere).

4) Coefficients and reconstructed frames are copied from/to OpenCL GPU device, but mapped for CPU device.
Less memory operations (not a major factor, other operations dominate in time consuption).

5) Little change in vector search.Now always check for (0;0) vector.
Now hierarchical search does not trick blocks with no real movement.
Note: only (0;0) is checked, no small areas around;
As result: little-little bit better quality, little bit lesser size at the same time on some of test videos

6) CPU host part still not optimized even a bit.
